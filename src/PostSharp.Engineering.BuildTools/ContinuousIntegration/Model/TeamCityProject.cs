// Copyright (c) SharpCrafters s.r.o. See the LICENSE.md file in the root directory of this repository root for details.

using System;
using System.IO;
using System.Linq;

namespace PostSharp.Engineering.BuildTools.ContinuousIntegration.Model
{
    internal class TeamCityProject
    {
        private readonly string? _objectName;
        private readonly string? _projectName;
        private readonly TeamCityBuildConfiguration[] _configurations;
        private readonly TeamCityProject[] _subProjects;

        public TeamCityProject( TeamCityBuildConfiguration[] configurations, TeamCityProject[]? subProjects = null )
        {
            this._configurations = configurations;
            this._subProjects = subProjects ?? [];
        }
        
        public TeamCityProject( string objectName, string projectName, TeamCityBuildConfiguration[] configurations, TeamCityProject[]? subProjects = null )
            : this( configurations, subProjects )
        {
            this._objectName = objectName;
            this._projectName = projectName;
        }

        public void GenerateTeamcityCode( TextWriter writer )
        {
            writer.WriteLine(
                @"// This file is automatically generated by `Build.ps1 generate-scripts`.

// Both Swabra and swabra need to be imported
import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.buildFeatures.sshAgent
import jetbrains.buildServer.configs.kotlin.buildFeatures.Swabra
import jetbrains.buildServer.configs.kotlin.buildFeatures.swabra
import jetbrains.buildServer.configs.kotlin.buildSteps.powerShell
import jetbrains.buildServer.configs.kotlin.failureConditions.*
import jetbrains.buildServer.configs.kotlin.triggers.*

version = ""2024.03""

project {
" );

            void WriteProjectBody( TeamCityProject project )
            {
                foreach ( var configuration in project._configurations )
                {
                    writer.WriteLine( $"    buildType({configuration.ObjectName})" );
                }

                writer.WriteLine();
                var configurationsOrder = string.Join( ',', project._configurations.Select( c => c.ObjectName ) );
                writer.WriteLine( $"    buildTypesOrder = arrayListOf({configurationsOrder})" );
                
                if ( project._subProjects.Length > 0 )
                {
                    writer.WriteLine();

                    foreach ( var subProject in project._subProjects )
                    {
                        writer.WriteLine( $"    subProject({subProject._objectName})" );
                    }
                
                    writer.WriteLine();
                    var subProjectsOrder = string.Join( ',', project._subProjects.Select( p => p._objectName ) );
                    writer.WriteLine( $"    subProjectsOrder = arrayListOf({subProjectsOrder})" );
                }
            }
            
            WriteProjectBody( this );
            
            writer.WriteLine(
                $@"
}}" );

            writer.WriteLine();

            foreach ( var configuration in this._configurations.Concat( this._subProjects.SelectMany( p => p._configurations ) ) )
            {
                configuration.GenerateTeamcityCode( writer );
                writer.WriteLine();
            }

            foreach ( var subProject in this._subProjects )
            {
                writer.WriteLine(
                    $@"object {subProject._objectName} : Project({{

    name = ""{subProject._projectName}""
" );
                
                WriteProjectBody( subProject );
                
                writer.WriteLine(
                    $@"
}})" );
            }
        }
    }
}